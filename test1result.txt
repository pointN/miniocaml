val test : string -> unit = <fun>
test: 1+2*3-15/4
---Interpreter---
- : int = 4
-------CAM-------
- : int = 4
-------ZAM-------
- : int = 4
- : unit = ()
test: ---1
---Interpreter---
- : int = -1
-------CAM-------
- : int = -1
-------ZAM-------
- : int = -1
- : unit = ()
test: 1<2
---Interpreter---
- : bool = true
-------CAM-------
- : bool = true
-------ZAM-------
- : bool = true
- : unit = ()
test: false=true
---Interpreter---
- : bool = false
-------CAM-------
- : bool = false
-------ZAM-------
- : bool = false
- : unit = ()
test: 1*1<>2*2
---Interpreter---
- : bool = true
-------CAM-------
- : bool = true
-------ZAM-------
- : bool = true
- : unit = ()
test: 4>4
---Interpreter---
- : bool = false
-------CAM-------
- : bool = false
-------ZAM-------
- : bool = false
- : unit = ()
test: if 1+1=2 then (if 1*1=2 then 0 else 1) else -1
---Interpreter---
- : int = 1
-------CAM-------
- : int = 1
-------ZAM-------
- : int = 1
- : unit = ()
test: let f = fun x -> x * 2 in let x = 3 in f x
---Interpreter---
- : int = 6
-------CAM-------
- : int = 6
-------ZAM-------
- : int = 6
- : unit = ()
test: let f = fun x -> fun y -> if x then y else 1 in f
---Interpreter---
- : bool -> int -> int = <fun>
-------CAM-------
- : bool -> int -> int = <fun>
-------ZAM-------
- : bool -> int -> int = <fun>
- : unit = ()
test: let f = fun x -> fun y -> if x then y else 1 in f true 0
---Interpreter---
- : int = 0
-------CAM-------
- : int = 0
-------ZAM-------
- : int = 0
- : unit = ()
test: let rec f x = if x=0 then 0 else x+f(x-1) in f 3
---Interpreter---
- : int = 6
-------CAM-------
- : int = 6
-------ZAM-------
- : int = 6
- : unit = ()
test: let rec f x = fun sum -> if x=0 then sum else f (x-1) (sum+x) in f 5 0
---Interpreter---
- : int = 15
-------CAM-------
- : int = 15
-------ZAM-------
- : int = 15
- : unit = ()
test: []
---Interpreter---
- : 'a0 list = []
-------CAM-------
- : 'a0 list = []
-------ZAM-------
- : 'a0 list = []
- : unit = ()
test: (100)::[(1+1)]
---Interpreter---
- : int list = [100; 2]
-------CAM-------
- : int list = [100; 2]
-------ZAM-------
- : int list = [100; 2]
- : unit = ()
test: List.hd [[1;2];[2]]
---Interpreter---
- : int list = [1; 2]
-------CAM-------
- : int list = [1; 2]
-------ZAM-------
- : int list = [1; 2]
- : unit = ()
test: List.tl [1;2;3]
---Interpreter---
- : int list = [2; 3]
-------CAM-------
- : int list = [2; 3]
-------ZAM-------
- : int list = [2; 3]
- : unit = ()
test: List.tl [1]
---Interpreter---
- : int list = []
-------CAM-------
- : int list = []
-------ZAM-------
- : int list = []
- : unit = ()
test: let x = [[1;2];[]] in (List.hd x)::(List.tl x)
---Interpreter---
- : int list list = [[1; 2]; []]
-------CAM-------
- : int list list = [[1; 2]; []]
-------ZAM-------
- : int list list = [[1; 2]; []]
- : unit = ()
test: let f = fun x -> List.hd x + 5 in f [1;2;3]
---Interpreter---
- : int = 6
-------CAM-------
- : int = 6
-------ZAM-------
- : int = 6
- : unit = ()
test: if true<false then -1 else if true>false then 1 else 0
---Interpreter---
- : int = 1
-------CAM-------
- : int = 1
-------ZAM-------
- : int = 1
- : unit = ()
test: []<[1]
---Interpreter---
- : bool = true
-------CAM-------
- : bool = true
-------ZAM-------
- : bool = true
- : unit = ()
test: [1;2;3]<[1;3;2]
---Interpreter---
- : bool = true
-------CAM-------
- : bool = true
-------ZAM-------
- : bool = true
- : unit = ()
test: [[1;2];[2]] > [[1;2];[1;5]]
---Interpreter---
- : bool = true
-------CAM-------
- : bool = true
-------ZAM-------
- : bool = true
- : unit = ()
test: [] > [fun x -> x]
---Interpreter---
- : bool = false
-------CAM-------
- : bool = false
-------ZAM-------
- : bool = false
- : unit = ()
test: fun f -> fun x -> fun g -> if x then (f x)+1 else f(g x)+1
---Interpreter---
- : (bool -> int) -> bool -> (bool -> bool) -> int = <fun>
-------CAM-------
- : (bool -> int) -> bool -> (bool -> bool) -> int = <fun>
-------ZAM-------
- : (bool -> int) -> bool -> (bool -> bool) -> int = <fun>
- : unit = ()
test: fun x -> fun g -> g x
---Interpreter---
- : 'a0 -> ('a0 -> 'a1) -> 'a1 = <fun>
-------CAM-------
- : 'a0 -> ('a0 -> 'a1) -> 'a1 = <fun>
-------ZAM-------
- : 'a0 -> ('a0 -> 'a1) -> 'a1 = <fun>
- : unit = ()
test: fun a -> fun b -> fun c -> (a b)+1=((c a) 1)
---Interpreter---
- : ('a0 -> int) -> 'a0 -> (('a0 -> int) -> int -> int) -> bool = <fun>
-------CAM-------
- : ('a0 -> int) -> 'a0 -> (('a0 -> int) -> int -> int) -> bool = <fun>
-------ZAM-------
- : ('a0 -> int) -> 'a0 -> (('a0 -> int) -> int -> int) -> bool = <fun>
- : unit = ()
test: fun a -> fun b -> fun c -> fun d -> (a b) (c d) = (b d)
---Interpreter---
- : (('a0 -> 'a1) -> 'a2 -> 'a1) -> ('a0 -> 'a1) -> ('a0 -> 'a2) -> 'a0 -> bool = <fun>
-------CAM-------
- : (('a0 -> 'a1) -> 'a2 -> 'a1) -> ('a0 -> 'a1) -> ('a0 -> 'a2) -> 'a0 -> bool = <fun>
-------ZAM-------
- : (('a0 -> 'a1) -> 'a2 -> 'a1) -> ('a0 -> 'a1) -> ('a0 -> 'a2) -> 'a0 -> bool = <fun>
- : unit = ()
test: fun x -> fun y -> ((List.hd (List.hd x)) y) 1
---Interpreter---
- : ('a0 -> int -> 'a1) list list -> 'a0 -> 'a1 = <fun>
-------CAM-------
- : ('a0 -> int -> 'a1) list list -> 'a0 -> 'a1 = <fun>
-------ZAM-------
- : ('a0 -> int -> 'a1) list list -> 'a0 -> 'a1 = <fun>
- : unit = ()
